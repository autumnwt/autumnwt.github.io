<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>数据结构之线性表</title>
      <link href="/2022/09/11/shu-ju-jie-gou-zhi-xian-xing-biao/"/>
      <url>/2022/09/11/shu-ju-jie-gou-zhi-xian-xing-biao/</url>
      
        <content type="html"><![CDATA[<h1 id="数据结构之线性表"><a href="#数据结构之线性表" class="headerlink" title="数据结构之线性表"></a>数据结构之线性表</h1><h2 id="知识回顾"><a href="#知识回顾" class="headerlink" title="知识回顾"></a><strong>知识回顾</strong></h2><p>数据结构  </p><ul><li>逻辑结构  <ul><li>线性结构  <ul><li>线性表  </li><li>栈（特殊线性表） </li><li>队列（特殊线性表）</li><li>字符串、数组、广义表</li></ul></li><li>非线性结构  <ul><li>树形结构  </li><li>图形结构</li></ul></li></ul></li><li>数据的存储结构  <ul><li>顺序存储  </li><li>链式存储</li></ul></li><li>数据的运算：检索、排序、插入…</li></ul><h2 id="线性表的定义和特点"><a href="#线性表的定义和特点" class="headerlink" title="线性表的定义和特点"></a><strong>线性表的定义和特点</strong></h2><p>线性表是具有相同特性的数据元素的一个有限序列  </p><blockquote><p>(a1,a2,…,ai-1,ai,ai+1,…an)  </p><p>a1:线性起点<br>ai-1:ai的直接前趋<br>ai+1:ai的直接后继<br>an:线性终点<br>n=0时称为空表（n是表长） </p></blockquote><p>同一线性表中的元素必定具有相同特性，数据元素之间的关系是线性关系  </p><h2 id="案例引入"><a href="#案例引入" class="headerlink" title="案例引入"></a><strong>案例引入</strong></h2><p>案例一：一元多项式的运算：实现两个多项式的加、减、乘运算  </p><p><img src="/2022/09/11/shu-ju-jie-gou-zhi-xian-xing-biao/1.jpg" alt="案例一">  </p><p>案例二：稀疏多项式的运算  </p><p><img src="/2022/09/11/shu-ju-jie-gou-zhi-xian-xing-biao/2.jpg"><br><img src="/2022/09/11/shu-ju-jie-gou-zhi-xian-xing-biao/3.jpg" alt="案例二">  </p><blockquote><p>Q:那么数组C多大合适呢？  </p><p>顺序存储结构存在的问题  </p><ul><li>存储空间分配不灵活  </li><li>运算的空间复杂度高</li></ul></blockquote><p>—&gt;选择链式存储结构<br><img src="/2022/09/11/shu-ju-jie-gou-zhi-xian-xing-biao/4.jpg" alt="链式存储方法">   </p><p>案例三：图书信息管理系统  </p><ul><li>将图书表抽象为线性表  </li><li>表中每本书抽象线性表中数据元素</li></ul><p><img src="/2022/09/11/shu-ju-jie-gou-zhi-xian-xing-biao/5.jpg" alt="两种方式">  </p><p>线性表中数据元素可以是<em>简单类型</em>，也可以是<em>复杂类型</em>  </p>]]></content>
      
      
      <categories>
          
          <category> 数据结构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据结构 </tag>
            
            <tag> C语言 </tag>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PHP基础简记ch.1</title>
      <link href="/2022/09/07/php-ji-chu-jian-ji-ch.1/"/>
      <url>/2022/09/07/php-ji-chu-jian-ji-ch.1/</url>
      
        <content type="html"><![CDATA[<h1 id="PHP基础简记ch-1"><a href="#PHP基础简记ch-1" class="headerlink" title="PHP基础简记ch.1"></a>PHP基础简记ch.1</h1><h2 id="PHP标记"><a href="#PHP标记" class="headerlink" title="PHP标记"></a><strong>PHP标记</strong></h2><p> 1.脚本标记   </p><pre class="line-numbers language-PHP" data-language="PHP"><code class="language-PHP">&lt;script language="php"&gt;  echo 'hello world';&lt;/script&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p> 2.标准标记  </p><pre class="line-numbers language-PHP" data-language="PHP"><code class="language-PHP">&lt;?php  echo 'hello world';?&gt; <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="PHP注释"><a href="#PHP注释" class="headerlink" title="PHP注释"></a><strong>PHP注释</strong></h2><ul><li>行注释 <code>//</code>、<code>#</code>  </li><li>块注释 <code>/* */</code></li></ul><h2 id="语句分隔符"><a href="#语句分隔符" class="headerlink" title="语句分隔符"></a><strong>语句分隔符</strong></h2><p>PHP中，代码是以行为单位，系统需要通过判断行的结束，该结束通常都是一个符号：分号 <code>;</code> (英文状态下的)</p><h2 id="变量"><a href="#变量" class="headerlink" title="变量"></a><strong>变量</strong></h2><pre class="line-numbers language-PHP" data-language="PHP"><code class="language-PHP">&lt;?php  //定义变量  $var1;  $var2 = 1;//定义同时赋值  echo $var2;//通过var2变量名字找到储存内容1，然后输出    //删除变量，使用unset（变量名字）  unset($var2)?&gt; <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="预定义变量"><a href="#预定义变量" class="headerlink" title="预定义变量"></a>预定义变量</h3><p>提前定义的变量，储存许多需要用的数据（预定义变量都是数组）  </p><ul><li>$_GET：获取所有表单以get方式提交的数据</li><li>$_POST: POST提交的数据都会保存在此次</li><li>$_REQUEST: GET和POST提交的都会保存</li><li>$_SERVER: 服务器信息</li><li>$_SESSION: session会话数据</li></ul><h3 id="可变变量"><a href="#可变变量" class="headerlink" title="可变变量"></a>可变变量</h3><p>如果一个变量保存的值刚好是另一个变量的名字，则可以：  </p><pre class="line-numbers language-PHP" data-language="PHP"><code class="language-PHP">&lt;?php  //可变变量  $a = 'b';  $b = 'bb';  echo $$a;  //输出结果为bb?&gt; <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="变量传值"><a href="#变量传值" class="headerlink" title="变量传值"></a>变量传值</h3><p>将一个变量赋值给另一个变量  </p><ul><li>值传递  </li><li>引用传递</li></ul><pre class="line-numbers language-PHP" data-language="PHP"><code class="language-PHP">&lt;?php  $a = 1;  $b = $a; //值传递    $b = 2;  echo $a,$b;  //输出结果1,2  $a = 1;  $b = &amp;$a; //引用传递    $b = 2;  echo $a,$b;  //输出结果2,2?&gt; <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="常量"><a href="#常量" class="headerlink" title="常量"></a><strong>常量</strong></h2><p>常量一旦定义，通常数据不可改变</p><ul><li>使用定义常量的函数 <code>define( , )</code>  </li><li>5.3后才有的：const 常量名 = 值</li></ul><pre class="line-numbers language-PHP" data-language="PHP"><code class="language-PHP">&lt;?php  define('PI',3.14) ;  const PII =3 ;?&gt; <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>常量不需要使用<code>$</code>符号，一旦使用会被认为是变量<br>常量的名字组成由字母、数字和下划线组成，不能以数字开头<br>常量的名字通常以大写字母为主<br>define 和 const 定义的常亮有区别，在于权限的区别，如：   </p><pre class="line-numbers language-PHP" data-language="PHP"><code class="language-PHP">&lt;?php  define('-_-','smile') ;  //正确  const -_- ='smile' ; //错误?&gt; <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>如需访问常量，则需使用另外一个访问常量的函数：<code>echo constant('常量名')</code>  </p><h3 id="系统常量"><a href="#系统常量" class="headerlink" title="系统常量"></a>系统常量</h3><p>系统常量： 系统帮助用户定义的常量，用户可以直接使用<br>常用的几个系统常量：  </p><ul><li>PHP_VERSION  </li><li>PHP_INT_SIZE  </li><li>PHP_INT_MAX</li></ul><p>在PHP中还有一些特殊的常量，他们由双下划线开始+常量名+双下划线结束，这种常量称之为系统魔术常量，魔术常量的值通常会跟着环境变化，但是用户改变不了，如：  </p><ul><li><code>__DIR__</code>:被执行脚本在电脑的绝对路径  </li><li><code>__FILE__</code>:被执行脚本在电脑的绝对路径（带文件名）  </li><li><code>__LINE__</code>:当前所属行数的绝对路径  </li><li><code>__NAMESPACE__</code>:当前所属命名空间  </li><li><code>__CLASS__</code>:当前所属类  </li><li><code>__METHOD__</code>:当前所属方法</li></ul><h2 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a><strong>数据类型</strong></h2><p>在PHP中得的是存储的数据本身的类型，而不是变量的类型，PHP是一种弱类型语言，本身并没有类型  </p><h3 id="PHP的八种数据类型"><a href="#PHP的八种数据类型" class="headerlink" title="PHP的八种数据类型"></a>PHP的八种数据类型</h3><p>在PHP中将数据分为三大类八小类  </p><ul><li>基本数据类型<ul><li>整型：int ，四个字节储存  </li><li>浮点型：float/double ，八个字节储存</li><li>字符串型：string  </li><li>布尔类型：bool</li></ul></li><li>复合数据类型<ul><li>对象：object ，存放对象  </li><li>数组：array ，存储多个数据（一次性）</li></ul></li><li>特殊数据类型<ul><li>资源：resource ，存放资源数据</li><li>空类型：NULL</li></ul></li></ul><h3 id="类型转换"><a href="#类型转换" class="headerlink" title="类型转换"></a>类型转换</h3><p>需要指定数据类型，需要外部数据  </p><ul><li>自动转换：系统根据需求自己判定，效率偏低  </li><li>强制转换：人为转换，在变量前加一个括号，在里面写入对应类型</li></ul><p>在转换过程中，用的比较多的为转布尔类型和转数值类型，关于转布尔的说明：<br><img src="/2022/09/07/php-ji-chu-jian-ji-ch.1/about_bool.jpg" alt="布尔的相关说明">  </p><p>字符串转数值的说明  </p><ul><li>布尔true为1， false为0  </li><li>字符串转数值：<ul><li>以字母开头的字符串永远为0</li><li>以数字开头的字符串，取到碰到字符串为止（不会出现多个小数点）</li></ul></li></ul><pre class="line-numbers language-PHP" data-language="PHP"><code class="language-PHP">&lt;?php  $a = 'abc1.1.1';  $b = '1.1.1abc'; //创建数据  echo $a + $b;  //自动转换  //算数+运算，系统先转换成数值类型（整型和浮点型）  //结果为1.1    echo (float)$a,(foloat)$b; //输出结果01.1?&gt; <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="数据类型判断"><a href="#数据类型判断" class="headerlink" title="数据类型判断"></a>数据类型判断</h3><p>通过一组类型判断函数，来判断变量，最终返回这个变量所保存的数据类型（如果相同返回true）：以is_开头后面跟类型名字的函数: is_xxx(变量名)</p><p>bool类型不能用echo来查看，可使用<code>var_dump</code>结构来查看  </p><p>还有一组函数可以来获取积极设定数据的类型 gettype(变量名)：获取类型，得到的是该类型对应的字符串</p><p>settype(变量名，类型): 设定数据类型：与强制转换不同  </p><ul><li>强制转换是对数据值复制的内容进行处理  </li><li>settype会改变变量本身</li></ul><h3 id="整数类型进制"><a href="#整数类型进制" class="headerlink" title="整数类型进制"></a>整数类型进制</h3><blockquote><p>在PHP中提供了四种类型的定义方式：十进制、二进制、八进制、十六进制<br><code>$a=120; //十进制</code><br><code>$a=0b120; //二进制</code><br><code>$a=0120; //八进制</code><br><code>$a=0x120; //十六进制</code>  </p></blockquote><h3 id="整数类型进制转换"><a href="#整数类型进制转换" class="headerlink" title="整数类型进制转换"></a>整数类型进制转换</h3><ul><li><code>decbin()</code>:10转2  </li><li><code>decoct()</code>:10转8  </li><li><code>dechex()</code>:10转16  </li><li><code>bindec()</code>:2转10</li></ul><h3 id="浮点类型"><a href="#浮点类型" class="headerlink" title="浮点类型"></a>浮点类型</h3><p>整型超过自身存储的大小后会用浮点型存储  </p><h2 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a><strong>运算符</strong></h2><p>与其他语言几乎一致，补充一点‘全等于’：<code>===</code> 左边与右边相同(大小、数据类型)</p>]]></content>
      
      
      <categories>
          
          <category> PHP </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PHP </tag>
            
            <tag> 语言 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2022/09/02/hello-world/"/>
      <url>/2022/09/02/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo new "My New Post"<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo server<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo generate<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo deploy<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
